/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package M2ijpahibernate;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputFilter.Config;
import java.util.Iterator;
import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;

import M2ijpahibernate.Entity.Actor;
import M2ijpahibernate.Entity.Film;
import M2ijpahibernate.Entity.FilmActor;
import M2ijpahibernate.Entity.Language;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Root;

public class App {
    public static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    public static void main(String[] args) throws IOException {
        /****** QUery ****************/
        // addActorToFilm();
        // TestFactors();
        // TestFcategory();
        // TestInsertFactors();
        /*****************************/

        /********* JPQL ****************/
        // getActorsByFirstName();
        // getFilmByTitleByN();
        // getFilmWhereTimeSupTwoHours();
        // replacementCostFilm();
        // getFilmWhereLengthBetween();
        /*****************************/

        /****** Appel method criteria ****/
        // getActorsByFirstNameCriteria();
        // GetFilmSortisIn(1993);
        getAllActorsCriteria();
        /********************************/
    }

    public static void filmActorCategory() throws IOException {
        Session session;

        Configuration configuration = new Configuration().configure();

        SessionFactory sessionFactory = configuration.buildSessionFactory();
        session = sessionFactory.openSession();
        Film f = session.getReference(Film.class, 1);
        // Iterator<Actor> a = f.getActors().iterator();
        // Iterator<Category> c = f.getCategory().iterator();
        // System.out.println("Film : " + f.getTitle() + "\n");

        // System.out.println("Acteurs :");
        // while (a.hasNext()) {
        // System.out.println("Nom : " + a.next().getLastName());
        // System.out.println("Prenom : " + a.next().getFirstName() + "\n");
        // }
        // while (c.hasNext()) {
        // System.out.println("Catégorie : " + c.next().getName());
        // }
        session.close();
    }

    public static void filmParCategory() throws IOException {
        Session session;

        Configuration configuration = new Configuration().configure();

        SessionFactory sessionFactory = configuration.buildSessionFactory();
        session = sessionFactory.openSession();
        // Category category = session.getReference(Category.class, 3);
        // Iterator<Film> films = category.getFilms().iterator();
        // System.out.println("Categorie :" + category.getName());
        // br.readLine();
        // System.out.println("Liste des films de cette catégorie: " + "\n");
        // while (films.hasNext()) {
        // System.out.println(
        // "Titre : " + films.next().getTitle() + "\n" +
        // "Description : " + films.next().getDescription());
        // br.readLine();
        // }
        session.close();
    }

    public static void filmParLanguage() throws IOException {
        Session session;

        Configuration configuration = new Configuration().configure();

        SessionFactory sessionFactory = configuration.buildSessionFactory();
        session = sessionFactory.openSession();

        Language l = session.getReference(Language.class, 1);
        Iterator<Film> films = l.getFilms().iterator();
        System.out.println("Langue : " + l.getName());

        System.out.println("Film associés a cette langue :");
        while (films.hasNext()) {
            System.out.println("Titre : " + films.next().getTitle());
            System.out.println("Description : " + films.next().getDescription());
        }
        session.close();
    }

    public static void addActorToFilm() {
        Session session;

        Configuration configuration = new Configuration().configure();

        SessionFactory sessionFactory = configuration.buildSessionFactory();
        session = sessionFactory.openSession();

        Actor a = session.getReference(Actor.class, 4);
        Film f = session.getReference(Film.class, 50);
        Transaction tx = session.beginTransaction();

        // f.getActors().add(a);
        session.persist(a);

        tx.commit();
        session.close();
    }

    public static void TestFactors() {
        Session session;

        Configuration configuration = new Configuration().configure();

        SessionFactory sessionFactory = configuration.buildSessionFactory();
        session = sessionFactory.openSession();
        Film f1 = session.getReference(Film.class, 4);

        f1.getFActors().forEach((factor) -> {
            System.out.println(factor.getActor().getLastName() + "-" + factor.getFilm().getTitle() + "-");
        });

    }

    public static void TestInsertFactors() {
        Session session;
        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        session = sessionFactory.openSession();
        Film f1 = session.getReference(Film.class, 4);
        Actor a2 = session.getReference(Actor.class, 21);

        Transaction tx = session.beginTransaction();
        FilmActor fa = new FilmActor();
        // fa.setLastUpdate(new Date());
        fa.setActor(a2);
        fa.setFilm(f1);
        session.persist(fa);
        tx.commit();
        session.close();
    }

    public static void TestFcategory() {
        Session session;
        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        session = sessionFactory.openSession();
        Film f2 = session.getReference(Film.class, 4);

        f2.getFCategory().forEach((action) -> {
            System.out.println(action.getCategory().getName() + "-" + action.getFilm().getTitle());
        });

    }

    public static void TestInsetFcategory() {
        // TODO
    }

    public static void getActorsByFirstName() {
        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.openSession();

        TypedQuery<Actor> myQuery = session.createQuery("select a from Actor a WHERE a.FirstName LIKE:FirstName",
                Actor.class);
        myQuery.setParameter("FirstName", "NICK");

        List<Actor> actors = myQuery.getResultList();
        System.out.println(actors.size());
    }

    public static void getFilmByTitleByN() {
        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.openSession();

        TypedQuery<Film> myQuery = session.createQuery("select f from Film f WHERE f.title LIKE:title",
                Film.class);
        myQuery.setParameter("title", "N%");

        List<Film> films = myQuery.getResultList();
        System.out.println(films.size());
    }

    public static void getFilmWhereTimeSupTwoHours() {
        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.openSession();

        TypedQuery<Film> myQuery = session.createNativeQuery("SELECT * FROM sakila.film WHERE length > 120",
                Film.class);
        // myQuery.setParameter("length", "> 120");

        List<Film> films = myQuery.getResultList();
        System.out.println(films.size());

    }

    public static void replacementCostFilm() {

        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.openSession();

        TypedQuery<Film> myQuery = session.createQuery(
                "SELECT f FROM Film as f JOIN f.languageID as l WHERE remplacementCost >: paramreplacement",
                Film.class);
        myQuery.setParameter("paramreplacement", 10);
        List<Film> films = myQuery.getResultList();
        System.out.println(films.size());
        films.stream().forEach(x -> {
            System.out.println("Titre : " + x.getTitle() + " = > Langue : " + x.getLanguageID().getName());
        });

    }

    // #region CRITERIA
    /************** Method Criteria *********************/

    public static void getActorsByFirstNameCriteria() {
        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.openSession();

        // Recupération du builder
        CriteriaBuilder builder = session.getCriteriaBuilder();
        // Préparation
        CriteriaQuery<Actor> criteria = builder.createQuery(Actor.class);
        // Selection de l'objet Root
        Root<Actor> root = criteria.from(Actor.class);

        // Création de la requête
        criteria.select(root);
        criteria.where(builder.equal(root.get("FirstName"), "NICK"));

        List<Actor> actors = session.createQuery(criteria).getResultList();
        System.out.println(actors.size());
    }

    /*************************************************/

    public static void GetFilmSortisIn(int year) {

        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.openSession();

        // Recupération du builder
        CriteriaBuilder builder = session.getCriteriaBuilder();
        // Préparation
        CriteriaQuery<Film> criteria = builder.createQuery(Film.class);
        // Selection de l'objet Root
        Root<Film> root = criteria.from(Film.class);

        // Création de la requête
        criteria.select(root);
        criteria.where(builder.equal(root.get("releaseYear"), year));
        List<Film> films = session.createQuery(criteria).getResultList();
        System.out.println(films.size());

    }

    /***************************************************/
    public static void getAllActorsCriteria() {

        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.openSession();

        // Recupération du builder
        CriteriaBuilder builder = session.getCriteriaBuilder();
        // Préparation
        CriteriaQuery<Actor> criteria = builder.createQuery(Actor.class);
        // Selection de l'objet Root
        Root<Actor> root = criteria.from(Actor.class);

        // Création de la requête
        criteria.select(root);
        // criteria.where(builder.equal(root.get("FirstName")));
        List<Actor> actors = session.createQuery(criteria).getResultList();
        System.out.println(actors.size());
    }
    // #endregion

    // select film_id , title, length from film where length between 50 and 90;
    public static void getFilmWhereLengthBetween() {
        Configuration configuration = new Configuration().configure();
        SessionFactory sessionFactory = configuration.buildSessionFactory();
        Session session = sessionFactory.openSession();

        TypedQuery<Film> myQuery = session
                .createQuery("SELECT f FROM Film as f WHERE f.length BETWEEN : paramBetween and: paramBetween2",
                        Film.class);
        myQuery.setParameter("paramBetween", 50);
        myQuery.setParameter("paramBetween2", 90);
        List<Film> films = myQuery.getResultList();
        System.out.println(films.size());
        films.stream().forEach(x -> {
            System.out.println("Titre : " + x.getTitle() + " = > Langue : " + x.getLanguageID().getName());
        });
    }

}
